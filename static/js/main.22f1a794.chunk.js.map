{"version":3,"sources":["components/Statistic/LocalStorageItemList.js","components/Statistic/index.js","components/ItemEditor/index.js","serviceWorker.js","index.js"],"names":["ItemList","console","log","keys","length","localStorage","charLength","push","key","getItem","react_default","a","createElement","Fragment","map","v","k","href","concat","window","location","origin","React","Component","LocalStorageInfo","LocalStorageItemList_ItemList","ItemEditorIndex","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleContainerKeypress","e","stopPropagation","preventDefault","handleChange","name","setState","defineProperty","target","value","handleTitleBlur","handleContentChange","content","handleContentKeyUp","handleItemUpdate","setItem","state","title","cookieStorage","set","handleTitleKeyUp","keyCode","which","contentRef","current","focus","querySelector","handleItemUpdateByHotKey","decodeURI","pathname","split","createRef","titleRef","get","handlers","SAVE_UPDATE","index_es","keyMap","Container","maxWidth","onKeyPress","TextField","ref","id","onKeyUp","onBlur","onChange","multiline","margin","fullWidth","placeholder","helperText","Button","variant","onClick","style","float","Statistic_LocalStorageInfo","Boolean","hostname","match","ReactDOM","render","ItemEditor_ItemEditorIndex","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22f1a794.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class ItemList extends React.Component {\n  render() {\n    console.log('ItemList');\n    let keys = [];\n    let length = localStorage.length;\n    let charLength = 0;\n    while (length--) {\n      keys.push(localStorage.key(length));\n      charLength += localStorage.getItem(localStorage.key(length)).length;\n    }\n    console.log('itemList', keys);\n    return <div>\n      <h3>Item List</h3>\n      <div>Characters Length: {charLength}</div>\n      <React.Fragment>\n        {keys.map((v,k) => <li key={k}><a href={`${window.location.origin}/${v}`}>{v}</a></li>)}\n      </React.Fragment>\n    </div>\n  }\n}","import React from 'react';\nimport LocalStorageItemList from './LocalStorageItemList';\n\nexport default class LocalStorageInfo extends React.Component {\n  render() {\n    return <div>\n      <h2>Statistic</h2>\n      <LocalStorageItemList />\n    </div>\n  }\n}","import React from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Statistic from \"../Statistic\";\nimport { HotKeys } from \"react-hotkeys\";\nimport cookieStorage from 'js-cookie';\n\nexport default class ItemEditorIndex extends React.Component {\n  constructor(props) {\n    super(props);\n    if (!decodeURI(window.location.pathname.split(\"/\")[1])) {\n      window.location.href = window.location.origin + \"/Readme\";\n    }\n    const title = decodeURI(window.location.pathname.split(\"/\")[1]);\n    this.state = {\n      title: title,\n      content: localStorage.getItem(title)\n    };\n    this.contentRef = React.createRef();\n    this.titleRef = React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(this.titleRef.current);\n    this.titleRef.current.focus();\n    console.log('originMethod', cookieStorage.get('originMethod'));\n    console.log('cleanUpCookies', cookieStorage.set('originMethod', null));\n  }\n\n  handleContainerKeypress = (e) => {\n    console.log('onKeyUp', e.key);\n    if (e.key === 's') {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  }\n\n  handleChange = name => (e) => {\n    this.setState({\n      [name]: e.target.value\n      // return {\n      //   ...state,\n      //   [name]: e.target.value\n      // }\n    });\n    console.log('handleTitleChange', e.target.value);\n  }\n\n  handleTitleBlur = () => {\n    // this.handleArticleSave();\n  }\n\n  handleContentChange = (e) => {\n    this.setState({content: e.target.value});\n  }\n\n  handleContentKeyUp = (e) => {\n    console.log(e.key);\n    if (e.key === 'Enter') {\n      this.handleItemUpdate();\n    }\n  }\n\n  handleItemUpdate = () => {\n    localStorage.setItem(this.state.title, this.state.content);\n    window.location.href = window.location.origin + \"/\" + this.state.title;\n    cookieStorage.set('originMethod', 'handleItemUpdate');\n  }\n\n  handleTitleKeyUp = (e) => {\n    console.log(e, e.key);\n    const code = e.keyCode || e.which;\n    if (e.key === \"Enter\") {\n      console.log('focus');\n      this.contentRef.current.focus();\n      localStorage.setItem(this.state.title, this.state.content);\n      this.handleItemUpdate();\n      console.log(this.contentRef.current);\n      console.log(this.contentRef.current.querySelector(\"textarea\").focus());\n    }\n  }\n\n  handleItemUpdateByHotKey = (e) => {\n    e.preventDefault();\n    this.handleItemUpdate();\n    console.log('handleItemUpdate');\n  }\n\n  render() {\n    const keyMap = {\n      SAVE_UPDATE: [\"command+s\", \"ctrl+s\"],\n    };\n\n    const handlers = {\n      SAVE_UPDATE: this.handleItemUpdateByHotKey\n    };\n\n    return (\n      <HotKeys keyMap={keyMap} handlers={handlers}>\n        <Container maxWidth=\"md\" onKeyPress={this.handleContainerKeypress}>\n          <h1>\n            <TextField\n              ref={this.titleRef}\n              id=\"title\"\n              name=\"title\"\n              value={this.state.title}\n              onKeyUp={this.handleTitleKeyUp}\n              onBlur={this.handleTitleBlur}\n              onChange={this.handleChange('title')}\n            />\n          </h1>\n          <TextField\n            ref={this.contentRef}\n            id=\"content\"\n            name=\"content\"\n            value={this.state.content}\n            onChange={this.handleContentChange}\n            onKeyUp={this.handleContentKeyUp}\n            multiline\n            margin=\"normal\"\n            fullWidth\n            placeholder=\"Content Here\"\n            helperText=\"Content saved 1 mins ago\"\n          />\n          <Button\n            variant=\"outlined\"\n            onClick={this.handleItemUpdate}\n            style={{float: \"right\"}}\n          >Save</Button>\n          {/* <Button\n            variant=\"outlined\"\n            onClick={() => {alert('Content Published (demo)')}}\n            style={{float: \"right\"}}\n          >Publish</Button> */}\n          <Statistic />\n        </Container>\n      </HotKeys>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/ItemEditor';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}